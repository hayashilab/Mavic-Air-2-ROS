<launch>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find drone_sim)/worlds/drone_playground.world"/> 
    <!-- <arg name="world_name" value="$(find drone_sim)/worlds/droneOnly.world"/> -->
    <!-- <arg name="world_name" value="$(find drone_sim)/worlds/Munakata_Beach.world"/> -->
    <!-- more default parameters can be changed here -->
  </include>
  
  
  
  <node pkg="drone_sim" name="DepthEstimate" type="DepthEstimate.py" output="screen"/>

  
  <node pkg="drone_sim" name="launch_stil" type="launch_stil.py" output="screen"/>

  <arg name="node_start_delay" default="1.0" /> 
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find drone_rviz)/rviz/drone_3.rviz" launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@' "/>
  
  
  <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" />
  
  
  <node pkg="nodelet" type="nodelet" args="manager"
        name="record_player_manager" output="screen"/>

  <!-- Debayer and undistort the rgb image
       TODO: this should be split into nodelets -->
  <node 
    pkg="image_proc" 
    type="image_proc" 
    name="ip_node1" 
    ns="camera/rgb"
    />

  
  <!-- The depth image is already rectified and registered
       to the camera optical frame, but stored in mm; convert it
       to meters -->
  <node pkg="nodelet" type="nodelet" name="metric_rect" 
        args="load depth_image_proc/convert_metric record_player_manager --no-bond">
    <remap from="image_raw" to="/cam_depth"/>
    <remap from="image" to="/cam_depth_f"/>
  </node>
  

  <node pkg="nodelet" type="nodelet" name="cloudify"
        args="load depth_image_proc/point_cloud_xyzrgb record_player_manager --no-bond">
    <remap from="depth_registered/image_rect" to="/cam_depth"/>
    <remap from="depth_registered/points" to="/camera/depth_registered/points"/>
    <remap from="rgb/image_rect_color" to="/cam_rgb"/>
    <remap from="rgb/camera_info" to="/cam_info"/>
  </node>
  
   <param name="robot_description" command="$(find xacro)/xacro  '/home/titan/sdf2urdf/model.urdf'" /> 
   <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
   
   <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" /> 
</launch>
